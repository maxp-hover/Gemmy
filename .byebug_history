continue
self
define_step
include Gemmy::Components
self
continue
hash
hash.set(:a, :b, 0)
hash
hash.get :a, :b
continue
caller
{}.bury
Hash.include Gemmy::Patches::HashPatch
{}.bury
Hash.extend Gemmy::Patches::HashPatch
self.class
Hash.extend self.class
continue
{}.bury
continue
self.class
self
send(:bury)
{}.bury
method(:bury)
__callee__
__method__
continue
__callee__
__method__
continue
hash.bury
continue
"".nothing
Object.new.method(:nothing)
Object.method(:nothing)
[].any_not?
continue
Gemmy::Patches.list.values.each { |x| using x }
using Gemmy::Patches.list.values[0]
Gemmy::Patches.list.values
Gemmy::Patches.list
continue
self.class.class_exec { "".unindent }
self.class::String.new.unindent
self.class::String
self.class::String = Gemmy::Patches::StringPatch
self.class.class_exec { "".unindent }
self.class_exec
self.class::Thread == Gemmy::Patches::ThreadPatch
Thread == Gemmy::Patches::ThreadPatch
Thread
Thread.class
self.class::Thread = Gemmy::Patches::ThreadPatch
self::Thread
self.class::Array
Array
[].any_not?
continue
 match_results.any_not?
String == Object::String
self.class.const_set("String", String.clone)
String == Object::String
String
continue
self.class::String
self.class
exit-program
continue
a.unindent
a.singleton_class.prepend patch_klass
a.singleton_class
a = String.new
a.unindent
a.extend patch_klass
a = String.new
a = Array.new
Asd.new
b = Asd.new
Asd.new
Asd = Class.new
b = A.new
A = Class.new
b = a.new
a = Class.new
patch_klass
base.class_exec { "".unindent }
base.extend patch_klass
base.class_exec { "".unindent }
base.include patch_klass
base.class_exec { "".unindent }
base.prepend patch_klass
base.class
base
continue
self
match_results.any_not?
continue
a.class
a.send :using, patch_klass
a.using
a = Class.new
base
base.send(:using, patch_klass)
base.using
base
continue
self.class
self.class.constants
self
"asd".unindent
continue
"asd".unindent
self.constants
Gemmy::Patches.load(self.class)
self.constants
Gemmy::Patches.load(self)
self.class.constants
self.constants
self
self.class.class
self.class.clas
self.class
self
continue
base.send :class_exec, &->{ fn.call }
base.send :class_exec { fn.call }
base
context
