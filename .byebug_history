continue
res.map(&:run_commands)
res.each(&:run_commands)
res.run_commands
res[0].run_commands
res[0]
res
continue
VerbLexicon
Object.send :remove_const, "VerbLexicon"
Object.remove_const "VerbLexicon"
self.remove_const
self
Class.send :remove_const, "VerbLexicon"
Class.remove_const "VerbLexicon"
Class.remove_const "VerbLexicon
Class::VerbLexicon
VerbLexicon.class.class
VerbLexicon.class
VerbLexicon
continue
exit-program
continue
pos
continue
word
pos
continue
VerbLexicon
NounLexicon
 sentences.map &m(:parse_sentence)
continue
pos
word
exit-program
continue
Enumerator.method(:shift)
word
pos
exit-program
continue
parts_of_speech(word)
parts_of_speech(word
word
pos
continue
exit-program
continue
line.match(/^\s\s(.+)\:/).to_a.tap(&:shift)
continue
line.match(/^\s\s(.+)\:/).to_a.tap(&:shift)
continue
line.match(/^\s\s(.+)\:/).to_a.tap(&:shift)
continue
line.match(/^\s\s(.+)\:/).to_a.tap(&:shift)
continue
line.match(/^\s\s(.+)\:/).to_a.tap(&:shift)
continue
`wordpos def #{word}`.split("\n").tap(&:shift)[1].match(/^\s\s(.+)\:/).to_a.tap(&:shift)
`wordpos def #{word}`.split("\n").tap(&:shift)[0].match(/^\s\s(.+)\:/).to_a.tap(&:shift)
`wordpos def #{word}`.split("\n").tap(&:shift)
`wordpos def #{word}`
continue
sentece
word
continue
sentence
word
continue
line.match(/^\s\s(.+)\:/)[1]
line.match(/^\s\s(.+)\:/)
line.match(/^(.+).+/)
line.match(/$\s(.+).+/)
line.match(/$\s\s(.+).+/)
line.match(/$\s\s(.+)\:/)
line
continue
tagger.get_proper_nouns sentence
tagger.get_verbs sentence
tagger.get_nouns sentence
tagger.add_tags sentence
sentence
tagger = EngTagger.new
t.get_noun_phrases sentence
t.nouns
sentence
t.get_verbs sentence
t.get_nouns sentence
t = EngTagger.new
tagged.class
tagged
continue
args
continue
sentence
continue
[].to_enum.map_by
continue
Gemmy::Patches::SymbolPatch::InstanceMethods::Call._call
self
continue
module Test
"".strip_heredoc
CF
[1, 2, 3].extract_options!
[].extract_options!
[].extract_options
{a:1, b:2}.extract_options!
continue
[1,2,3].key_by { |v| v % 2 }
[1,1,2,3].key_by { |v| v % 2 }
continue
h[1]
h
h[1].push 1
h[1]
h[1] << 1
h[1]
 h = Hash.new { |k,v| v = [] }
[1,1,2,3].key_by { |v| v % 2 }
continue
[1,1,2,3].key_by { |v| v % 2 }
continue
[1,1,2,3].key_by { |v| v % 2 }
1 % 2
[1,2,3].key_by { |v| v % 2 }
continue
Array.zip([1], [2])
Array.wrap [1]
Array.wrap 1
Array.wrap []
Array.wrap nil
continue
        Array.wrap(nil)
continue
CF::Support.classes_including_modules(nil)
CF::Support.classes_including_modules
super
exit-program
patch_klass.refine
patch_klass
core_klass
continue
Array.class
Enumerable.class
patch_klass.send(:refine, core_klass) { }
patch_klass.class
core_klass.class
patch_klass
core_klass
e
continue
[1,2,3].each &(arr.method(:push).bind("and"))
arr = []
continue
[1,2,3].each &arr.method(:push).bind("and")
arr = []
continue
[1,2,3].each &arr.method(:push).bind("and")
arr = []
continue
[].push([],[])
[].concat([],[])
a.concat([], []_
1.+(1,2)
1.method(:+)
1.method(:add)
Integer.method(:add)
a = (&:add)
(&:add)
method(:add)
[1,2,3].class
[1,2,3]
continue
StringIO.send :gets
StringIO.gets
StringIO
continue
Kernel.gets
Kernel
continue
ARGV
gets
next
ARGV
continue
patch_types
hash
type_sym
type_sym\
continue
Gemmy::Patches::HashPatch::InstanceMethods::Autovivified._autovivified
continue
self.class
self
Gemmy::Patches::HashPatch::InstanceMethods::Autovivified._autovivified self
continue
Gemmy::Patches::HashPatch::InstanceMethods::Autovivified._autovivified
Gemmy::Patches::HashPatch::InstanceMethods::Autovivified
continue
core_klass_sym
Object.const_get core_klass_sym.to_s
const_get core_klass_sym.to_s
self
continue
Gemmy::Patches.class_refinements
continue
 instance_classes.const_get klass_sym
klass_sym
continue
patch_class
continue
"".unindent
""unindent
[].any_not?
[].any_not
next
continue
Gemmy::Patches.class_refinements
continue
Gemmy::Patches.class_refinements
exit-program
continue
using patch_klass
"".unindent
patch_klass
patch_klass.send(:refine, const_get(core_klass)) { include patch_klass }
patch_klass.send(:refine, const_get(core_klass)) { |x| puts(x.class) }
patch_klass.send(:refine, const_get(core_klass)) { |x| puts(x) }
patch_klass.send(:refine, const_get(core_klass)) { |x| puts(x); }
patch_klass.send(:refine, const_get(core_klass)) { |x| puts(x); puts(x) }
patch_klass.send(:refine, const_get(core_klass)) { |x| puts x; puts x }
patch_klass.send(:refine, const_get(core_klass)) { |x| puts x }
patch_klass.send(:refine, const_get(core_klass))
patch_klass.send(:refine)
patch_klass.refine
patch_klass
core_klass
continue
self
define_step
include Gemmy::Components
self
continue
hash
hash.set(:a, :b, 0)
hash
hash.get :a, :b
continue
caller
{}.bury
Hash.include Gemmy::Patches::HashPatch
{}.bury
Hash.extend Gemmy::Patches::HashPatch
self.class
Hash.extend self.class
